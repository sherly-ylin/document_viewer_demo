@using TXTextControl.Web.MVC.DocumentViewer
@using System.Text


@{
    ViewData["Title"] = "E-Sign";
}
<h1>@ViewData["Title"]</h1>


@{
    ViewData["Title"] = "Document Viewer Demo";
}

<div class="viewer-container">
    @if (ViewBag.HasDocument != null && ViewBag.HasDocument)
    {
        <div class="viewer mt-2">
        	@Html.TXTextControl().DocumentViewer(settings => {
                @* settings.DocumentPath = Server.MapPath("~/App_Data/signature.tx"); *@
                settings.DocumentData = ViewBag.DocumentData;
                settings.DocumentPath = ViewBag.DocumentName;
                settings.Dock = DocumentViewerSettings.DockStyle.Fill;
                settings.IsSelectionActivated = false;
                settings.ShowThumbnailPane = true; 
                @* settings.SignatureSettings = new SignatureSettings() {
                    ShowSignatureBar = true,
                    OwnerName = "SalesChain",
                    SignerName = "Tim Typer",
                    SignerInitials = "TT",
                    UniqueId = "1234567890",
                    RedirectUrlAfterSignature = 
                    this.Url.Action("SignDocument", "Signature", null, Context.Request.Scheme, null),
                    SignatureBoxes = new SignatureBox[] { 
                        new SignatureBox("txsign") { 
                            SigningRequired = true, Style = SignatureBox.SignatureBoxStyle.Signature },
                        new SignatureBox("txsign_init") { 
                            SigningRequired = true, Style = SignatureBox.SignatureBoxStyle.Initials }}
                }; *@
            }).Render()
        </div>
        
        <div class="mt-2">
            <div class="row">
                <div class="col-md-6">
                    <div class="page-selection-panel">
                        <h5><i class="fas fa-file-export"></i> Page Selection</h5>
                        <div class="form-group">
                            <label for="pageNumbers">Select pages to download (comma-separated):</label>
                            <input type="text" id="pageNumbers" class="form-control" placeholder="e.g., 1,3,5 or 1-3,5">
                            <label for="fileName">File Name:</label>
                            <input type="text" id="fileName" class="form-control" placeholder="Enter File Name">
                            <small class="form-text text-muted">
                                Enter individual pages (1,2,3) or ranges (1-3,5-7)
                            </small>
                        </div>
                        <button type="button" class="btn btn-success" onclick="downloadSelectedPages()">
                            <i class="fas fa-download"></i> Download Selected Pages as PDF
                        </button>
                    </div>
                </div>
                @* <div class="col-md-6">
                    <div class="download-options">
                        <h5><i class="fas fa-download"></i> Download Options</h5>
                        <div class="d-grid gap-2">
                            <a href="@Url.Action("DownloadDocumentAsPdf", "Home", new { sessionKey = ViewBag.SessionKey })" 
                               class="btn btn-primary" target="_blank">
                                <i class="fas fa-file-pdf"></i> Download Full Document as PDF
                            </a>
                            <small class="text-muted">
                                <i class="fas fa-lightning"></i> Fast download using cached document
                            </small>
                        </div>
                    </div>
                </div> *@
            </div>
        </div>
        
        <input type="hidden" id="documentSessionKey" value="@ViewBag.SessionKey" />
    }
    else if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Error Loading Document</h4>
            <p>@ViewBag.ErrorMessage</p>
            <hr>
            <a href="@Url.Action("Index", "Home")" class="btn btn-outline-danger">
                <i class="fas fa-redo"></i> Try Again
            </a>
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            <p><i class="fas fa-info-circle"></i> No document available to display.</p>
        </div>
    }
</div>


<script>

    window.addEventListener("documentViewerLoaded", function () {
        @* TXDocumentViewer.annotations.showToolbar(true); *@
        console.log(TXDocumentViewer.pageNumbers)
    });
    function downloadSelectedPages() {
        const pageInput = document.getElementById('pageNumbers').value.trim();
        console.log('Page input:', pageInput);
        const fileName = document.getElementById('fileName').value.trim();
        console.log("Custom file name: ", fileName);

        const sessionKey = document.getElementById('documentSessionKey').value;
        console.log('Session Key:', sessionKey);

        if (!pageInput) {
            alert('Please enter page numbers to download.');
            return;
        }
        if (!fileName) {
            alert('Please enter file name to download.');
            return;
        }
        if (!sessionKey) {
            alert('Session key is missing. Please refresh the page.');
            return;
        }
           // Show loading indicator
        const button = event.target;
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        button.disabled = true;

        // Parse the page numbers/ranges
        const pageNumbers = parsePageNumbers(pageInput);
        console.log('Parsed page numbers:', pageNumbers);
        if (pageNumbers.length === 0) {
            alert('Please enter valid page numbers.');
            return;
        }

        // Create a form to submit the page numbers
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("DownloadSelectedPages", "Home")';
        form.target = '_blank';

        // Add CSRF token if available
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token.value;
            form.appendChild(tokenInput);
        }
        // Add session key
        const sessionKeyInput = document.createElement('input');
        sessionKeyInput.type = 'hidden';
        sessionKeyInput.name = 'sessionKey';
        sessionKeyInput.value = sessionKey;
        form.appendChild(sessionKeyInput);

        // Add page numbers as hidden inputs
        pageNumbers.forEach(function (pageNum) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'pageNumbers';
            input.value = pageNum;
            form.appendChild(input);
        });
        // Add file name as hidden inputs
        const fileNameInput = document.createElement('input');
        fileNameInput.type = 'hidden';
        fileNameInput.name = 'fileName';    
        fileNameInput.value = fileName;
        form.appendChild(fileNameInput);

        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);

        // Reset button after a short delay
    setTimeout(function() {
        button.innerHTML = originalText;
        button.disabled = false;
    }, 2000);
    }

    function getCurrentPage() {
        var page = $(".thumb-pagenumber").val();
        console.log('Current page: ' + page);
        console.log('Current page: ' + $('#curPage').val());
        @* const viewer = document.querySelector('.viewer');
        if (viewer && viewer.TXTextControl) {
            const page = viewer.TXTextControl.getCurrentPage();
            console.log('Current page: ' + page);
        } *@
        return null;
    }
    function parsePageNumbers(input) {
        const pageNumbers = [];
        const parts = input.split(',');

        parts.forEach(function (part) {
            part = part.trim();

            if (part.includes('-')) {
                // Handle ranges like "1-3"
                const range = part.split('-');
                if (range.length === 2) {
                    const start = parseInt(range[0].trim());
                    const end = parseInt(range[1].trim());

                    if (!isNaN(start) && !isNaN(end) && start <= end) {
                        for (let i = start; i <= end; i++) {
                            if (pageNumbers.indexOf(i) === -1) {
                                pageNumbers.push(i);
                            }
                        }
                    }
                }
            } else {
                // Handle individual pages
                const pageNum = parseInt(part);
                if (!isNaN(pageNum) && pageNum > 0 && pageNumbers.indexOf(pageNum) === -1) {
                    pageNumbers.push(pageNum);
                }
            }
        });
        console.log('Parsed page numbers:', pageNumbers);
        return pageNumbers.sort(function (a, b) { return a - b; });
    }
</script>

<style>
    .viewer-container {
        margin: 1em;
        align-items: center;
        @* border: 1px solid #333; *@
        width: 100%;
    }

    .viewer {
        width: 100%;
        height: 70vh;
        max-height: max-content;
        @* border: 1px solid #131c35; *@
    }
    #tx-documentViewer{
        width: 100%;
        height: 100%;
    }

    .alert {
        margin-top: 20px;
    }

    .btn {
        margin-right: 10px;
    }


    .page-selection-panel,.alert .download-options {
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f8f9fa;
        width: 100% ;
        margin-top: 1em;
    }

    .page-selection-panel h5,
    .download-options h5 {
        color: #495057;
        margin-bottom: 15px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        margin-bottom: 5px;
    }
</style>